-- //////////////////////////////////////////////////////////////
-- // ARCHIVO:			
-- //////////////////////////////////////////////////////////////
-- // BASE DE DATOS:	PYF18_Finanzas
-- // MODULO:			AUTORIZACIONES
-- // OPERACION:		LIBERACION / TABLAS
-- //////////////////////////////////////////////////////////////
-- // Autor:			ALEX DE LA ROSA // HECTOR A. GONZALEZ 
-- // Fecha creación:	15/OCT/2018
-- ////////////////////////////////////////////////////////////// 

USE [PYF18_Finanzas_V9999_R0]
GO

-- //////////////////////////////////////////////////////////////



-- //////////////////////////////////////////////////////////////
-- // DROPs
-- //////////////////////////////////////////////////////////////

IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[AUTORIZACION]') AND type in (N'U'))
	DROP TABLE [dbo].[AUTORIZACION] 
GO

IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[MODO_AUTORIZACION]') AND type in (N'U'))
	DROP TABLE [dbo].[MODO_AUTORIZACION]
GO

IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[ESTATUS_AUTORIZACION]') AND type in (N'U'))
	DROP TABLE [dbo].[ESTATUS_AUTORIZACION]
GO

IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[TIPO_AUTORIZACION]') AND type in (N'U'))
	DROP TABLE [dbo].[TIPO_AUTORIZACION]
GO

IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[CLASE_AUTORIZACION]') AND type in (N'U'))
	DROP TABLE [dbo].[CLASE_AUTORIZACION]
GO


IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[ROL_AUTORIZACION]') AND type in (N'U'))
	DROP TABLE [dbo].[ROL_AUTORIZACION]
GO



-- ///////////////////////////////////////////////////////////////
-- // ROL_AUTORIZACION
-- ///////////////////////////////////////////////////////////////

CREATE TABLE [dbo].[ROL_AUTORIZACION] (
	[K_ROL_AUTORIZACION]			INT NOT NULL,
	[D_ROL_AUTORIZACION]			VARCHAR (100) NOT NULL,
	[S_ROL_AUTORIZACION]			VARCHAR (10) NOT NULL,
	[O_ROL_AUTORIZACION]			INT NOT NULL,
	[C_ROL_AUTORIZACION]			VARCHAR (255) NOT NULL,
	[L_ROL_AUTORIZACION]			INT NOT NULL
) ON [PRIMARY]
GO


-- //////////////////////////////////////////////////////////////


ALTER TABLE [dbo].[ROL_AUTORIZACION]
	ADD CONSTRAINT [PK_ROL_AUTORIZACION]
		PRIMARY KEY CLUSTERED ([K_ROL_AUTORIZACION])
GO


CREATE UNIQUE NONCLUSTERED 
	INDEX [UN_ROL_AUTORIZACION_01_DESCRIPCION] 
	   ON [dbo].[ROL_AUTORIZACION] ( [D_ROL_AUTORIZACION] )
GO


ALTER TABLE [dbo].[ROL_AUTORIZACION] ADD 
	CONSTRAINT [FK_ROL_AUTORIZACION_01] 
		FOREIGN KEY ( [L_ROL_AUTORIZACION] ) 
		REFERENCES [dbo].[ESTATUS_ACTIVO] ( [K_ESTATUS_ACTIVO] )
GO


-- //////////////////////////////////////////////////////////////


IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PG_CI_ROL_AUTORIZACION]') AND type in (N'P', N'PC'))
	DROP PROCEDURE [dbo].[PG_CI_ROL_AUTORIZACION]
GO


CREATE PROCEDURE [dbo].[PG_CI_ROL_AUTORIZACION]
	@PP_L_DEBUG							INT,
	@PP_K_SISTEMA_EXE					INT,
	@PP_K_ROL_AUTORIZACION		INT,
	@PP_D_ROL_AUTORIZACION		VARCHAR(100),
	@PP_S_ROL_AUTORIZACION		VARCHAR(10),
	@PP_O_ROL_AUTORIZACION		INT,
	@PP_C_ROL_AUTORIZACION		VARCHAR(255),
	@PP_L_ROL_AUTORIZACION		INT
AS
	-- ===============================

	DECLARE @VP_K_EXISTE	INT

	SELECT	@VP_K_EXISTE =	K_ROL_AUTORIZACION
							FROM	ROL_AUTORIZACION
							WHERE	K_ROL_AUTORIZACION=@PP_K_ROL_AUTORIZACION

	-- ===============================

	IF @VP_K_EXISTE IS NULL
		INSERT INTO ROL_AUTORIZACION
		(	K_ROL_AUTORIZACION,			D_ROL_AUTORIZACION, 
			S_ROL_AUTORIZACION,			O_ROL_AUTORIZACION,
			C_ROL_AUTORIZACION,
			L_ROL_AUTORIZACION			)		
		VALUES	
		(	@PP_K_ROL_AUTORIZACION,		@PP_D_ROL_AUTORIZACION,	
			@PP_S_ROL_AUTORIZACION,		@PP_O_ROL_AUTORIZACION,
			@PP_C_ROL_AUTORIZACION,
			@PP_L_ROL_AUTORIZACION		)
	ELSE
		UPDATE	ROL_AUTORIZACION
		SET		D_ROL_AUTORIZACION	= @PP_D_ROL_AUTORIZACION,	
				S_ROL_AUTORIZACION	= @PP_S_ROL_AUTORIZACION,			
				O_ROL_AUTORIZACION	= @PP_O_ROL_AUTORIZACION,
				C_ROL_AUTORIZACION	= @PP_C_ROL_AUTORIZACION,
				L_ROL_AUTORIZACION	= @PP_L_ROL_AUTORIZACION	
		WHERE	K_ROL_AUTORIZACION=@PP_K_ROL_AUTORIZACION

	-- =========================================================
GO


-- ///////////////////////////////////////////////////////////////
-- SELECT * FROM ROL_AUTORIZACION

-- ===============================================
SET NOCOUNT ON
-- ===============================================

EXECUTE [dbo].[PG_CI_ROL_AUTORIZACION] 0, 0,  0, 'NO REQUERIDO',	'N/A', 0, '', 1
EXECUTE [dbo].[PG_CI_ROL_AUTORIZACION] 0, 0,  1, 'EGRESOS',			'EGR', 1, '', 1
EXECUTE [dbo].[PG_CI_ROL_AUTORIZACION] 0, 0,  2, 'GTE. PLANEACION',	'PLA', 2, '', 1
EXECUTE [dbo].[PG_CI_ROL_AUTORIZACION] 0, 0,  3, 'MESA CONTROL',	'MCO', 2, '', 1
EXECUTE [dbo].[PG_CI_ROL_AUTORIZACION] 0, 0,  4, 'DIR. FINANZAS',	'FIN', 2, '', 1
GO

-- ===============================================
SET NOCOUNT OFF
-- ===============================================


-- ///////////////////////////////////////////////////////////////
-- // CLASE_AUTORIZACION
-- ///////////////////////////////////////////////////////////////

CREATE TABLE [dbo].[CLASE_AUTORIZACION] (
	[K_CLASE_AUTORIZACION]			INT NOT NULL,
	[D_CLASE_AUTORIZACION]			VARCHAR (100) NOT NULL,
	[S_CLASE_AUTORIZACION]			VARCHAR (10) NOT NULL,
	[O_CLASE_AUTORIZACION]			INT NOT NULL,
	[C_CLASE_AUTORIZACION]			VARCHAR (255) NOT NULL,
	[L_CLASE_AUTORIZACION]			INT NOT NULL
) ON [PRIMARY]
GO


-- //////////////////////////////////////////////////////////////


ALTER TABLE [dbo].[CLASE_AUTORIZACION]
	ADD CONSTRAINT [PK_CLASE_AUTORIZACION]
		PRIMARY KEY CLUSTERED ([K_CLASE_AUTORIZACION])
GO


CREATE UNIQUE NONCLUSTERED 
	INDEX [UN_CLASE_AUTORIZACION_01_DESCRIPCION] 
	   ON [dbo].[CLASE_AUTORIZACION] ( [D_CLASE_AUTORIZACION] )
GO


ALTER TABLE [dbo].[CLASE_AUTORIZACION] ADD 
	CONSTRAINT [FK_CLASE_AUTORIZACION_01] 
		FOREIGN KEY ( [L_CLASE_AUTORIZACION] ) 
		REFERENCES [dbo].[ESTATUS_ACTIVO] ( [K_ESTATUS_ACTIVO] )
GO


-- //////////////////////////////////////////////////////////////


IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PG_CI_CLASE_AUTORIZACION]') AND type in (N'P', N'PC'))
	DROP PROCEDURE [dbo].[PG_CI_CLASE_AUTORIZACION]
GO


CREATE PROCEDURE [dbo].[PG_CI_CLASE_AUTORIZACION]
	@PP_L_DEBUG							INT,
	@PP_K_SISTEMA_EXE					INT,
	@PP_K_CLASE_AUTORIZACION		INT,
	@PP_D_CLASE_AUTORIZACION		VARCHAR(100),
	@PP_S_CLASE_AUTORIZACION		VARCHAR(10),
	@PP_O_CLASE_AUTORIZACION		INT,
	@PP_C_CLASE_AUTORIZACION		VARCHAR(255),
	@PP_L_CLASE_AUTORIZACION		INT
AS
	-- ===============================

	DECLARE @VP_K_EXISTE	INT

	SELECT	@VP_K_EXISTE =	K_CLASE_AUTORIZACION
							FROM	CLASE_AUTORIZACION
							WHERE	K_CLASE_AUTORIZACION=@PP_K_CLASE_AUTORIZACION

	-- ===============================

	IF @VP_K_EXISTE IS NULL
		INSERT INTO CLASE_AUTORIZACION
		(	K_CLASE_AUTORIZACION,			D_CLASE_AUTORIZACION, 
			S_CLASE_AUTORIZACION,			O_CLASE_AUTORIZACION,
			C_CLASE_AUTORIZACION,
			L_CLASE_AUTORIZACION			)		
		VALUES	
		(	@PP_K_CLASE_AUTORIZACION,		@PP_D_CLASE_AUTORIZACION,	
			@PP_S_CLASE_AUTORIZACION,		@PP_O_CLASE_AUTORIZACION,
			@PP_C_CLASE_AUTORIZACION,
			@PP_L_CLASE_AUTORIZACION		)
	ELSE
		UPDATE	CLASE_AUTORIZACION
		SET		D_CLASE_AUTORIZACION	= @PP_D_CLASE_AUTORIZACION,	
				S_CLASE_AUTORIZACION	= @PP_S_CLASE_AUTORIZACION,			
				O_CLASE_AUTORIZACION	= @PP_O_CLASE_AUTORIZACION,
				C_CLASE_AUTORIZACION	= @PP_C_CLASE_AUTORIZACION,
				L_CLASE_AUTORIZACION	= @PP_L_CLASE_AUTORIZACION	
		WHERE	K_CLASE_AUTORIZACION=@PP_K_CLASE_AUTORIZACION

	-- =========================================================
GO


-- ///////////////////////////////////////////////////////////////


-- ===============================================
SET NOCOUNT ON
-- ===============================================

EXECUTE [dbo].[PG_CI_CLASE_AUTORIZACION] 0, 0,  1, 'INGRESO',		'ING', 1, '', 1
EXECUTE [dbo].[PG_CI_CLASE_AUTORIZACION] 0, 0,  2, 'EGRESO',		'EGR', 1, '', 1
GO

-- ===============================================
SET NOCOUNT OFF
-- ===============================================



-- ///////////////////////////////////////////////////////////////
-- //					TIPO_AUTORIZACION
-- ///////////////////////////////////////////////////////////////

CREATE TABLE [dbo].[TIPO_AUTORIZACION] (
	[K_TIPO_AUTORIZACION]			INT NOT NULL,
	[D_TIPO_AUTORIZACION]			VARCHAR (100) NOT NULL,
	[S_TIPO_AUTORIZACION]			VARCHAR (10) NOT NULL,
	[O_TIPO_AUTORIZACION]			INT NOT NULL,
	[C_TIPO_AUTORIZACION]			VARCHAR (255) NOT NULL,
	[L_TIPO_AUTORIZACION]			INT NOT NULL,
	[K_CLASE_AUTORIZACION]			INT NOT NULL
) ON [PRIMARY]
GO


-- //////////////////////////////////////////////////////////////


ALTER TABLE [dbo].[TIPO_AUTORIZACION]
	ADD CONSTRAINT [PK_TIPO_AUTORIZACION]
		PRIMARY KEY CLUSTERED ([K_TIPO_AUTORIZACION])
GO


CREATE UNIQUE NONCLUSTERED 
	INDEX [UN_TIPO_AUTORIZACION_01_DESCRIPCION] 
	   ON [dbo].[TIPO_AUTORIZACION] ( [D_TIPO_AUTORIZACION] )
GO


ALTER TABLE [dbo].[TIPO_AUTORIZACION] ADD 
	CONSTRAINT [FK_TIPO_AUTORIZACION_01] 
		FOREIGN KEY ( [L_TIPO_AUTORIZACION] ) 
		REFERENCES [dbo].[ESTATUS_ACTIVO] ( [K_ESTATUS_ACTIVO] ),
	CONSTRAINT [FK_TIPO_AUTORIZACION_02] 
		FOREIGN KEY ( [K_CLASE_AUTORIZACION] ) 
		REFERENCES [dbo].[CLASE_AUTORIZACION] ( [K_CLASE_AUTORIZACION] )
GO



-- //////////////////////////////////////////////////////////////


IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PG_CI_TIPO_AUTORIZACION]') AND type in (N'P', N'PC'))
	DROP PROCEDURE [dbo].[PG_CI_TIPO_AUTORIZACION]
GO


CREATE PROCEDURE [dbo].[PG_CI_TIPO_AUTORIZACION]
	@PP_L_DEBUG							INT,
	@PP_K_SISTEMA_EXE					INT,
	@PP_K_TIPO_AUTORIZACION			INT,
	@PP_D_TIPO_AUTORIZACION			VARCHAR(100),
	@PP_S_TIPO_AUTORIZACION			VARCHAR(10),
	@PP_O_TIPO_AUTORIZACION			INT,
	@PP_C_TIPO_AUTORIZACION			VARCHAR(255),
	@PP_L_TIPO_AUTORIZACION			INT,
	@PP_K_CLASE_AUTORIZACION		INT		
AS

	-- ===============================

	DECLARE @VP_K_EXISTE	INT

	SELECT	@VP_K_EXISTE =	K_TIPO_AUTORIZACION
							FROM	TIPO_AUTORIZACION
							WHERE	K_TIPO_AUTORIZACION=@PP_K_TIPO_AUTORIZACION

	-- ===============================

	IF @VP_K_EXISTE IS NULL
		INSERT INTO TIPO_AUTORIZACION
		(	K_TIPO_AUTORIZACION,			D_TIPO_AUTORIZACION, 
			S_TIPO_AUTORIZACION,			O_TIPO_AUTORIZACION,
			C_TIPO_AUTORIZACION,
			L_TIPO_AUTORIZACION,
			K_CLASE_AUTORIZACION			)		
		VALUES	
		(	@PP_K_TIPO_AUTORIZACION,		@PP_D_TIPO_AUTORIZACION,	
			@PP_S_TIPO_AUTORIZACION,		@PP_O_TIPO_AUTORIZACION,
			@PP_C_TIPO_AUTORIZACION,
			@PP_L_TIPO_AUTORIZACION,
			@PP_K_CLASE_AUTORIZACION		)
	ELSE
		UPDATE	TIPO_AUTORIZACION
		SET		D_TIPO_AUTORIZACION	= @PP_D_TIPO_AUTORIZACION,	
				S_TIPO_AUTORIZACION	= @PP_S_TIPO_AUTORIZACION,			
				O_TIPO_AUTORIZACION	= @PP_O_TIPO_AUTORIZACION,
				C_TIPO_AUTORIZACION	= @PP_C_TIPO_AUTORIZACION,
				L_TIPO_AUTORIZACION	= @PP_L_TIPO_AUTORIZACION,
				K_CLASE_AUTORIZACION = @PP_K_CLASE_AUTORIZACION	
		WHERE	K_TIPO_AUTORIZACION=@PP_K_TIPO_AUTORIZACION

	-- =========================================================
GO


-- ///////////////////////////////////////////////////////////////


-- ===============================================
SET NOCOUNT ON
-- ===============================================


EXECUTE [dbo].[PG_CI_TIPO_AUTORIZACION] 0, 0,  0, 'SIN TIPO',					'SNTPO',	101, '', 1,  1
EXECUTE [dbo].[PG_CI_TIPO_AUTORIZACION] 0, 0,  1, 'EXTRAORDINARIO/PLANTA',		'XT/PTA',   101, '', 1,  2
EXECUTE [dbo].[PG_CI_TIPO_AUTORIZACION] 0, 0,  2, 'GASTO',						'DEPST',	101, '', 1,  1
GO

-- ===============================================
SET NOCOUNT OFF
-- ===============================================



-- ///////////////////////////////////////////////////////////////
-- //				ESTATUS_AUTORIZACION				
-- ///////////////////////////////////////////////////////////////
			

CREATE TABLE [dbo].[ESTATUS_AUTORIZACION] (
	[K_ESTATUS_AUTORIZACION]			INT NOT NULL,
	[D_ESTATUS_AUTORIZACION]			VARCHAR (100) NOT NULL,
	[S_ESTATUS_AUTORIZACION]			VARCHAR (10) NOT NULL,
	[O_ESTATUS_AUTORIZACION]			INT NOT NULL,
	[C_ESTATUS_AUTORIZACION]			VARCHAR (255) NOT NULL,
	[L_ESTATUS_AUTORIZACION]			INT NOT NULL
) ON [PRIMARY]
GO


-- //////////////////////////////////////////////////////////////


ALTER TABLE [dbo].[ESTATUS_AUTORIZACION]
	ADD CONSTRAINT [PK_ESTATUS_AUTORIZACION]
		PRIMARY KEY CLUSTERED ([K_ESTATUS_AUTORIZACION])
GO


CREATE UNIQUE NONCLUSTERED 
	INDEX [UN_ESTATUS_AUTORIZACION_01_DESCRIPCION] 
	   ON [dbo].[ESTATUS_AUTORIZACION] ( [D_ESTATUS_AUTORIZACION] )
GO


ALTER TABLE [dbo].[ESTATUS_AUTORIZACION] ADD 
	CONSTRAINT [FK_ESTATUS_AUTORIZACION_01] 
		FOREIGN KEY ( [L_ESTATUS_AUTORIZACION] ) 
		REFERENCES [dbo].[ESTATUS_ACTIVO] ( [K_ESTATUS_ACTIVO] )
GO


-- //////////////////////////////////////////////////////////////


IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PG_CI_ESTATUS_AUTORIZACION]') AND type in (N'P', N'PC'))
	DROP PROCEDURE [dbo].[PG_CI_ESTATUS_AUTORIZACION]
GO


CREATE PROCEDURE [dbo].[PG_CI_ESTATUS_AUTORIZACION]
	@PP_L_DEBUG								INT,
	@PP_K_SISTEMA_EXE						INT,
	@PP_K_ESTATUS_AUTORIZACION		INT,
	@PP_D_ESTATUS_AUTORIZACION		VARCHAR(100),
	@PP_S_ESTATUS_AUTORIZACION		VARCHAR(10),
	@PP_O_ESTATUS_AUTORIZACION		INT,
	@PP_C_ESTATUS_AUTORIZACION		VARCHAR(255),
	@PP_L_ESTATUS_AUTORIZACION		INT
AS
	
	-- ===============================

	DECLARE @VP_K_EXISTE	INT

	SELECT	@VP_K_EXISTE =	K_ESTATUS_AUTORIZACION
							FROM	ESTATUS_AUTORIZACION
							WHERE	K_ESTATUS_AUTORIZACION=@PP_K_ESTATUS_AUTORIZACION

	-- ===============================

	IF @VP_K_EXISTE IS NULL
		INSERT INTO ESTATUS_AUTORIZACION
		(	K_ESTATUS_AUTORIZACION,			D_ESTATUS_AUTORIZACION, 
			S_ESTATUS_AUTORIZACION,			O_ESTATUS_AUTORIZACION,
			C_ESTATUS_AUTORIZACION,
			L_ESTATUS_AUTORIZACION			)		
		VALUES	
		(	@PP_K_ESTATUS_AUTORIZACION,		@PP_D_ESTATUS_AUTORIZACION,	
			@PP_S_ESTATUS_AUTORIZACION,		@PP_O_ESTATUS_AUTORIZACION,
			@PP_C_ESTATUS_AUTORIZACION,
			@PP_L_ESTATUS_AUTORIZACION		)
	ELSE
		UPDATE	ESTATUS_AUTORIZACION
		SET		D_ESTATUS_AUTORIZACION	= @PP_D_ESTATUS_AUTORIZACION,	
				S_ESTATUS_AUTORIZACION	= @PP_S_ESTATUS_AUTORIZACION,			
				O_ESTATUS_AUTORIZACION	= @PP_O_ESTATUS_AUTORIZACION,
				C_ESTATUS_AUTORIZACION	= @PP_C_ESTATUS_AUTORIZACION,
				L_ESTATUS_AUTORIZACION	= @PP_L_ESTATUS_AUTORIZACION	
		WHERE	K_ESTATUS_AUTORIZACION=@PP_K_ESTATUS_AUTORIZACION

	-- =========================================================
GO

-- ///////////////////////////////////////////////////////////////


-- ===============================================
SET NOCOUNT ON
-- ===============================================

EXECUTE [dbo].[PG_CI_ESTATUS_AUTORIZACION] 0, 0, 1, 'ACTIVA',			'ACTVO', 1, '', 1
EXECUTE [dbo].[PG_CI_ESTATUS_AUTORIZACION] 0, 0, 2, 'SUSPENDIDA',		'SUSPN', 2, '', 1
EXECUTE [dbo].[PG_CI_ESTATUS_AUTORIZACION] 0, 0, 3, 'CANCELADA',		'CANCL', 3, '', 1
GO

-- ===============================================
SET NOCOUNT OFF
-- ===============================================



-- ///////////////////////////////////////////////////////////////
-- //					MODO_AUTORIZACION
-- ///////////////////////////////////////////////////////////////

CREATE TABLE [dbo].[MODO_AUTORIZACION] (
	[K_MODO_AUTORIZACION]			INT NOT NULL,
	[D_MODO_AUTORIZACION]			VARCHAR (100) NOT NULL,
	[S_MODO_AUTORIZACION]			VARCHAR (10) NOT NULL,
	[O_MODO_AUTORIZACION]			INT NOT NULL,
	[C_MODO_AUTORIZACION]			VARCHAR (255) NOT NULL,
	[L_MODO_AUTORIZACION]			INT NOT NULL
) ON [PRIMARY]
GO


-- //////////////////////////////////////////////////////////////


ALTER TABLE [dbo].[MODO_AUTORIZACION]
	ADD CONSTRAINT [PK_MODO_AUTORIZACION]
		PRIMARY KEY CLUSTERED ([K_MODO_AUTORIZACION])
GO


CREATE UNIQUE NONCLUSTERED 
	INDEX [UN_MODO_AUTORIZACION_01_DESCRIPCION] 
	   ON [dbo].[MODO_AUTORIZACION] ( [D_MODO_AUTORIZACION] )
GO


ALTER TABLE [dbo].[MODO_AUTORIZACION] ADD 
	CONSTRAINT [FK_MODO_AUTORIZACION_01] 
		FOREIGN KEY ( [L_MODO_AUTORIZACION] ) 
		REFERENCES [dbo].[ESTATUS_ACTIVO] ( [K_ESTATUS_ACTIVO] )
GO


-- //////////////////////////////////////////////////////////////


IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PG_CI_MODO_AUTORIZACION]') AND type in (N'P', N'PC'))
	DROP PROCEDURE [dbo].[PG_CI_MODO_AUTORIZACION]
GO


CREATE PROCEDURE [dbo].[PG_CI_MODO_AUTORIZACION]
	@PP_L_DEBUG					INT,
	@PP_K_SISTEMA_EXE			INT,
	@PP_K_MODO_AUTORIZACION		INT,
	@PP_D_MODO_AUTORIZACION		VARCHAR(100),
	@PP_S_MODO_AUTORIZACION		VARCHAR(10),
	@PP_O_MODO_AUTORIZACION		INT,
	@PP_C_MODO_AUTORIZACION		VARCHAR(255),
	@PP_L_MODO_AUTORIZACION		INT
AS
	-- ===============================

	DECLARE @VP_K_EXISTE	INT

	SELECT	@VP_K_EXISTE =	K_MODO_AUTORIZACION
							FROM	MODO_AUTORIZACION
							WHERE	K_MODO_AUTORIZACION=@PP_K_MODO_AUTORIZACION

	-- ===============================

	IF @VP_K_EXISTE IS NULL
		INSERT INTO MODO_AUTORIZACION
		(	K_MODO_AUTORIZACION,			D_MODO_AUTORIZACION, 
			S_MODO_AUTORIZACION,			O_MODO_AUTORIZACION,
			C_MODO_AUTORIZACION,
			L_MODO_AUTORIZACION			)		
		VALUES	
		(	@PP_K_MODO_AUTORIZACION,		@PP_D_MODO_AUTORIZACION,	
			@PP_S_MODO_AUTORIZACION,		@PP_O_MODO_AUTORIZACION,
			@PP_C_MODO_AUTORIZACION,
			@PP_L_MODO_AUTORIZACION		)
	ELSE
		UPDATE	MODO_AUTORIZACION
		SET		D_MODO_AUTORIZACION	= @PP_D_MODO_AUTORIZACION,	
				S_MODO_AUTORIZACION	= @PP_S_MODO_AUTORIZACION,			
				O_MODO_AUTORIZACION	= @PP_O_MODO_AUTORIZACION,
				C_MODO_AUTORIZACION	= @PP_C_MODO_AUTORIZACION,
				L_MODO_AUTORIZACION	= @PP_L_MODO_AUTORIZACION	
		WHERE	K_MODO_AUTORIZACION=@PP_K_MODO_AUTORIZACION

	-- =========================================================
GO

-- ///////////////////////////////////////////////////////////////


-- ===============================================
SET NOCOUNT ON
-- ===============================================

EXECUTE [dbo].[PG_CI_MODO_AUTORIZACION] 0, 0, 0, 'NO REQUERIDO',	'N/A',   0, '', 1
EXECUTE [dbo].[PG_CI_MODO_AUTORIZACION] 0, 0, 1, 'NOTIFICACION',	'NOTIF', 3, '', 1
EXECUTE [dbo].[PG_CI_MODO_AUTORIZACION] 0, 0, 2, 'TODOS',			'TODOS', 2, '', 1
EXECUTE [dbo].[PG_CI_MODO_AUTORIZACION] 0, 0, 3, 'UNO',				'UNO',   1, '', 1
GO

-- ===============================================
SET NOCOUNT OFF
-- ===============================================



-- ///////////////////////////////////////////////////////////////
-- //					AUTORIZACION					
-- ///////////////////////////////////////////////////////////////
	

CREATE TABLE [dbo].[AUTORIZACION] (
	-- =============================== CONTROL
	[K_AUTORIZACION]					INT NOT NULL,
	[D_AUTORIZACION]					VARCHAR(100) NOT NULL,
	[S_AUTORIZACION]					VARCHAR(10) NOT NULL,
	[C_AUTORIZACION]					VARCHAR(500) NOT NULL,
	-- =============================== 
	[K_ESTATUS_AUTORIZACION]			INT NOT NULL,
	[K_TIPO_AUTORIZACION]				INT NOT NULL,
	[LIMITE_INFERIOR]					DECIMAL(19,4) NOT NULL,
	[LIMITE_SUPERIOR]					DECIMAL(19,4) NOT NULL,
	-- =============================== PASO 1
	[K_MODO_AUTORIZACION_P1]			INT NOT NULL	DEFAULT 0,
	[N_DIAS_AUTORIZACION_P1]			INT NOT NULL	DEFAULT 0,
	[K_ROL_AUTORIZACION_P1A]			INT NOT NULL	DEFAULT 0,
	[K_ROL_AUTORIZACION_P1B]			INT NOT NULL	DEFAULT 0,
	[K_ROL_AUTORIZACION_P1C]			INT NOT NULL	DEFAULT 0,
	-- =============================== PASO 2
	[K_MODO_AUTORIZACION_P2]			INT NOT NULL,
	[N_DIAS_AUTORIZACION_P2]			INT NOT NULL	DEFAULT 0,
	[K_ROL_AUTORIZACION_P2A]			INT NOT NULL	DEFAULT 0,
	[K_ROL_AUTORIZACION_P2B]			INT NOT NULL	DEFAULT 0,
	[K_ROL_AUTORIZACION_P2C]			INT NOT NULL	DEFAULT 0,
	-- =============================== PASO 3
	[K_MODO_AUTORIZACION_P3]			INT NOT NULL,
	[N_DIAS_AUTORIZACION_P3]			INT NOT NULL	DEFAULT 0,
	[K_ROL_AUTORIZACION_P3A]			INT NOT NULL	DEFAULT 0,
	[K_ROL_AUTORIZACION_P3B]			INT NOT NULL	DEFAULT 0,
	[K_ROL_AUTORIZACION_P3C]			INT NOT NULL	DEFAULT 0,
	-- =============================== PASO 4
	[K_MODO_AUTORIZACION_P4]			INT NOT NULL,
	[N_DIAS_AUTORIZACION_P4]			INT NOT NULL	DEFAULT 0,
	[K_ROL_AUTORIZACION_P4A]			INT NOT NULL	DEFAULT 0,
	[K_ROL_AUTORIZACION_P4B]			INT NOT NULL	DEFAULT 0,
	[K_ROL_AUTORIZACION_P4C]			INT NOT NULL	DEFAULT 0,
	-- =============================== PASO 5
	[K_MODO_AUTORIZACION_P5]			INT NOT NULL,
	[N_DIAS_AUTORIZACION_P5]			INT NOT NULL	DEFAULT 0,
	[K_ROL_AUTORIZACION_P5A]			INT NOT NULL	DEFAULT 0,
	[K_ROL_AUTORIZACION_P5B]			INT NOT NULL	DEFAULT 0,
	[K_ROL_AUTORIZACION_P5C]			INT NOT NULL	DEFAULT 0
) ON [PRIMARY]
GO

-- //////////////////////////////////////////////////////

ALTER TABLE [dbo].[AUTORIZACION]
	ADD CONSTRAINT [PK_AUTORIZACION]
		PRIMARY KEY CLUSTERED ([K_AUTORIZACION])
GO

-- //////////////////////////////////////////////////////




-- //////////////////////////////////////////////////////


ALTER TABLE [dbo].[AUTORIZACION] ADD 
	CONSTRAINT [FK_AUTORIZACION_01] 
		FOREIGN KEY ([K_ESTATUS_AUTORIZACION]) 
		REFERENCES [dbo].[ESTATUS_AUTORIZACION] ([K_ESTATUS_AUTORIZACION]),
	CONSTRAINT [FK_AUTORIZACION_02] 
		FOREIGN KEY ([K_TIPO_AUTORIZACION]) 
		REFERENCES [dbo].[TIPO_AUTORIZACION] ([K_TIPO_AUTORIZACION])
GO


ALTER TABLE [dbo].[AUTORIZACION] ADD 
	CONSTRAINT [FK_AUTORIZACION_K_MODO_AUTORIZACION_1] 
		FOREIGN KEY (K_MODO_AUTORIZACION_P1) 
		REFERENCES [dbo].MODO_AUTORIZACION (K_MODO_AUTORIZACION),
	CONSTRAINT [FK_AUTORIZACION_K_MODO_AUTORIZACION_2] 
		FOREIGN KEY (K_MODO_AUTORIZACION_P2) 
		REFERENCES [dbo].MODO_AUTORIZACION (K_MODO_AUTORIZACION),
	CONSTRAINT [FK_AUTORIZACION_K_MODO_AUTORIZACION_3] 
		FOREIGN KEY (K_MODO_AUTORIZACION_P2) 
		REFERENCES [dbo].MODO_AUTORIZACION (K_MODO_AUTORIZACION),
	CONSTRAINT [FK_AUTORIZACION_K_MODO_AUTORIZACION_4] 
		FOREIGN KEY (K_MODO_AUTORIZACION_P2) 
		REFERENCES [dbo].MODO_AUTORIZACION (K_MODO_AUTORIZACION),
	CONSTRAINT [FK_AUTORIZACION_K_MODO_AUTORIZACION_5] 
		FOREIGN KEY (K_MODO_AUTORIZACION_P2) 
		REFERENCES [dbo].MODO_AUTORIZACION (K_MODO_AUTORIZACION)
GO




ALTER TABLE [dbo].[AUTORIZACION] ADD 
	CONSTRAINT [FK_AUTORIZACION_K_ROL_AUTORIZACION_1A] 
		FOREIGN KEY (K_ROL_AUTORIZACION_P1A) 
		REFERENCES [dbo].ROL_AUTORIZACION (K_ROL_AUTORIZACION),
	CONSTRAINT [FK_AUTORIZACION_K_ROL_AUTORIZACION_2A] 
		FOREIGN KEY (K_ROL_AUTORIZACION_P2A) 
		REFERENCES [dbo].ROL_AUTORIZACION (K_ROL_AUTORIZACION),
	CONSTRAINT [FK_AUTORIZACION_K_ROL_AUTORIZACION_3A] 
		FOREIGN KEY (K_ROL_AUTORIZACION_P3A) 
		REFERENCES [dbo].ROL_AUTORIZACION (K_ROL_AUTORIZACION),
	CONSTRAINT [FK_AUTORIZACION_K_ROL_AUTORIZACION_4A] 
		FOREIGN KEY (K_ROL_AUTORIZACION_P4A) 
		REFERENCES [dbo].ROL_AUTORIZACION (K_ROL_AUTORIZACION),
	CONSTRAINT [FK_AUTORIZACION_K_ROL_AUTORIZACION_5A] 
		FOREIGN KEY (K_ROL_AUTORIZACION_P5A) 
		REFERENCES [dbo].ROL_AUTORIZACION (K_ROL_AUTORIZACION)
GO



ALTER TABLE [dbo].[AUTORIZACION] ADD 
	CONSTRAINT [FK_AUTORIZACION_K_ROL_AUTORIZACION_1B] 
		FOREIGN KEY (K_ROL_AUTORIZACION_P1B) 
		REFERENCES [dbo].ROL_AUTORIZACION (K_ROL_AUTORIZACION),
	CONSTRAINT [FK_AUTORIZACION_K_ROL_AUTORIZACION_2B] 
		FOREIGN KEY (K_ROL_AUTORIZACION_P2B) 
		REFERENCES [dbo].ROL_AUTORIZACION (K_ROL_AUTORIZACION),
	CONSTRAINT [FK_AUTORIZACION_K_ROL_AUTORIZACION_3B] 
		FOREIGN KEY (K_ROL_AUTORIZACION_P3B) 
		REFERENCES [dbo].ROL_AUTORIZACION (K_ROL_AUTORIZACION),
	CONSTRAINT [FK_AUTORIZACION_K_ROL_AUTORIZACION_4B] 
		FOREIGN KEY (K_ROL_AUTORIZACION_P4B) 
		REFERENCES [dbo].ROL_AUTORIZACION (K_ROL_AUTORIZACION),
	CONSTRAINT [FK_AUTORIZACION_K_ROL_AUTORIZACION_5B] 
		FOREIGN KEY (K_ROL_AUTORIZACION_P5B) 
		REFERENCES [dbo].ROL_AUTORIZACION (K_ROL_AUTORIZACION)
GO


ALTER TABLE [dbo].[AUTORIZACION] ADD 
	CONSTRAINT [FK_AUTORIZACION_K_ROL_AUTORIZACION_1C] 
		FOREIGN KEY (K_ROL_AUTORIZACION_P1C) 
		REFERENCES [dbo].ROL_AUTORIZACION (K_ROL_AUTORIZACION),
	CONSTRAINT [FK_AUTORIZACION_K_ROL_AUTORIZACION_2C] 
		FOREIGN KEY (K_ROL_AUTORIZACION_P2C) 
		REFERENCES [dbo].ROL_AUTORIZACION (K_ROL_AUTORIZACION),
	CONSTRAINT [FK_AUTORIZACION_K_ROL_AUTORIZACION_3C] 
		FOREIGN KEY (K_ROL_AUTORIZACION_P3C) 
		REFERENCES [dbo].ROL_AUTORIZACION (K_ROL_AUTORIZACION),
	CONSTRAINT [FK_AUTORIZACION_K_ROL_AUTORIZACION_4C] 
		FOREIGN KEY (K_ROL_AUTORIZACION_P4C) 
		REFERENCES [dbo].ROL_AUTORIZACION (K_ROL_AUTORIZACION),
	CONSTRAINT [FK_AUTORIZACION_K_ROL_AUTORIZACION_5C] 
		FOREIGN KEY (K_ROL_AUTORIZACION_P5C) 
		REFERENCES [dbo].ROL_AUTORIZACION (K_ROL_AUTORIZACION)
GO
-- //////////////////////////////////////////////////////////////


ALTER TABLE [dbo].[AUTORIZACION] 
	ADD		[K_USUARIO_ALTA]				[INT] NOT NULL,
			[F_ALTA]						[DATETIME] NOT NULL,
			[K_USUARIO_CAMBIO]				[INT] NOT NULL,
			[F_CAMBIO]						[DATETIME] NOT NULL,
			[L_BORRADO]						[INT] NOT NULL,
			[K_USUARIO_BAJA]				[INT] NULL,
			[F_BAJA]						[DATETIME] NULL;
GO


ALTER TABLE [dbo].[AUTORIZACION] ADD 
	CONSTRAINT [FK_AUTORIZACION_USUARIO_ALTA]  
		FOREIGN KEY ([K_USUARIO_ALTA]) 
		REFERENCES [dbo].[USUARIO] ([K_USUARIO]),
	CONSTRAINT [FK_AUTORIZACION_USUARIO_CAMBIO]  
		FOREIGN KEY ([K_USUARIO_CAMBIO]) 
		REFERENCES [dbo].[USUARIO] ([K_USUARIO]),
	CONSTRAINT [FK_AUTORIZACION_USUARIO_BAJA]  
		FOREIGN KEY ([K_USUARIO_BAJA]) 
		REFERENCES [dbo].[USUARIO] ([K_USUARIO])
GO


-- //////////////////////////////////////////////////////////////
-- //////////////////////////////////////////////////////////////
-- //////////////////////////////////////////////////////////////
